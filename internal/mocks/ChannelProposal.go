// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	io "io"

	client "perun.network/go-perun/client"

	mock "github.com/stretchr/testify/mock"

	wire "perun.network/go-perun/wire"
)

// ChannelProposal is an autogenerated mock type for the ChannelProposal type
type ChannelProposal struct {
	mock.Mock
}

// Base provides a mock function with given fields:
func (_m *ChannelProposal) Base() *client.BaseChannelProposal {
	ret := _m.Called()

	var r0 *client.BaseChannelProposal
	if rf, ok := ret.Get(0).(func() *client.BaseChannelProposal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BaseChannelProposal)
		}
	}

	return r0
}

// Decode provides a mock function with given fields: _a0
func (_m *ChannelProposal) Decode(_a0 io.Reader) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Matches provides a mock function with given fields: _a0
func (_m *ChannelProposal) Matches(_a0 client.ChannelProposalAccept) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(client.ChannelProposalAccept) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *ChannelProposal) Type() wire.Type {
	ret := _m.Called()

	var r0 wire.Type
	if rf, ok := ret.Get(0).(func() wire.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(wire.Type)
	}

	return r0
}

// Valid provides a mock function with given fields:
func (_m *ChannelProposal) Valid() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChannelProposal interface {
	mock.TestingT
	Cleanup(func())
}

// NewChannelProposal creates a new instance of ChannelProposal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChannelProposal(t mockConstructorTestingTNewChannelProposal) *ChannelProposal {
	mock := &ChannelProposal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
