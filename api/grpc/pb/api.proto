// Copyright (c) 2020 - for information on the respective copyright owner
// see the NOTICE file and/or the repository at
// https://github.com/hyperledger-labs/perun-node
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Package pb contains proto3 definitions for user API and the corresponding
// generated code for grpc server and client.
package pb;

// Option go_package is to specify the exact path where the generated go code should reside.
option go_package = ".;pb";

// Peer ID represents the data required to identify and communicate
// with a participant in the the off-chain network.
message PeerID {
    string alias=1;
    string offChainAddress=2;
    string commAddress=3;
    string commType=4;
}

// BalInfo represents the balance information of the channel: Currency and the channel balance.
// Balance is represented as two corresponding lists:
// Parts contains the list of aliases of the channel participants and
// Balance list contains the amount held by each channel participant in the give currency.
//
// A valid BalInfo should meet the following conditions, it should be validated when using them.
//	1. Lengths of Parts list and Balance list are equal.
//	2. All entries in Parts list are unique.
//	3. Parts list has an entry "self", that represents the user of the session.
//	4. No amount in Balance must be negative.
message BalInfo {
    message bal {
        repeated string bal=1;
    }
    repeated string currencies=1;
    repeated string parts=2;
    repeated bal bals=3;
}

message PayChInfo {
    string chID = 1;
    BalInfo balInfo = 2;
    string version=3;
}

message Payment {
    string currency = 1;
    string payee = 2;
    string amount = 3;
}

// Balance represents the balance of a single asset, for all the channel
// participants.
message Balance {
  repeated bytes balance = 1;
}

// Balances represents the balance of all the assets, for all the channel
// participants.
message Balances {
  repeated Balance balances = 1;
}

// Params represents channel.Params.
message Params {
  bytes id = 1;
  uint64 challenge_duration = 2;
  repeated bytes parts = 3;
  bytes app = 4;
  bytes nonce = 5;
  bool ledger_channel = 6;
  bool virtual_channel = 7;
}


// IndexMap represents the mapping of a participant indices in a sub
// allocation or a virtual channel funding proposal to the corresponding
// indices in the parent channel.
message IndexMap {
  repeated uint32 index_map = 1;
}

// SubAlloc represts a sub allocation.
message SubAlloc {
  bytes id = 1;
  Balance bals = 2;
  IndexMap index_map = 3;
}

// Allocation represents channel.Allocation.
message Allocation {
  repeated bytes assets = 1;
  Balances balances = 2;
  repeated SubAlloc locked = 3;
}

// State represents channel.State.
message State {
  bytes id = 1;
  uint64 version = 2;
  bytes app = 3;
  Allocation allocation = 4;
  bytes data = 5;
  bool is_final = 6;
}

message MsgError {
    ErrorCategory category = 1;
    ErrorCode code = 2;
    string message = 3;
    oneof addInfo {
        ErrInfoPeerRequestTimedOut ErrInfoPeerRequestTimedOut = 4;
        ErrInfoPeerRejected ErrInfoPeerRejected = 5;
        ErrInfoPeerNotFunded ErrInfoPeerNotFunded = 6;
        ErrInfoUserResponseTimedOut ErrInfoUserResponseTimedOut = 7;
        ErrInfoResourceNotFound ErrInfoResourceNotFound = 8;
        ErrInfoResourceExists ErrInfoResourceExists = 9;
        ErrInfoInvalidArgument ErrInfoInvalidArgument = 10;
        ErrInfoFailedPreCondUnclosedChs  ErrInfoFailedPreCondUnclosedChs = 11;
        ErrInfoInvalidConfig ErrInfoInvalidConfig = 13;
        ErrInfoInvalidContracts ErrInfoInvalidContracts = 14;
        ErrInfoTxTimedOut ErrInfoTxTimedOut = 15;
        ErrInfoChainNotReachable ErrInfoChainNotReachable = 16;
    }
}

enum ErrorCategory {
    ParticipantError = 0;
    ClientError = 1;
    ProtocolError = 2;
    InternalError = 3;
}

enum ErrorCode {
    /* Though "0" is an invalid error code, we still define it, because
       proto3 requires that every enum definition should have 0 mapped to
       atleast one constant. */
    DefaultInvalidCode             = 0;

    ErrPeerRequestTimedOut       = 101;
    ErrPeerRejected              = 102;
    ErrPeerNotFunded             = 103;
    ErrUserResponseTimedOut      = 104;
    ErrResourceNotFound          = 201;
    ErrResourceExists            = 202;
    ErrInvalidArgument           = 203;
    ErrFailedPreCondition        = 204;
    ErrInvalidConfig             = 205;
    ErrInvalidContracts          = 206;
    ErrTxTimedOut                = 301;
    ErrChainNotReachable         = 302;
    ErrUnknownInternal           = 401;
}

message ErrInfoPeerRequestTimedOut {
    string peerAlias = 1;
    string timeout = 2;
}

message ErrInfoPeerRejected {
    string peerAlias = 1;
    string reason = 2;
}

message ErrInfoPeerNotFunded {
    string peerAlias = 1;
}

message ErrInfoUserResponseTimedOut {
    int64 expiry = 1;
    int64 receivedAt = 2;
}

message ErrInfoResourceNotFound {
    string type = 1;
    string id = 2;
}

message ErrInfoResourceExists {
    string type = 1;
    string id = 2;
}

message ErrInfoInvalidArgument {
    string name = 1;
    string value = 2;
    string requirement = 3;
}

message ErrInfoFailedPreCondUnclosedChs {
    repeated PayChInfo chs = 1;
}

message ErrInfoInvalidConfig {
    string name = 1;
    string value = 2;
}

message ContractErrInfo {
    string name = 1;
    string address = 2;
    string error = 3;
}

message ErrInfoInvalidContracts {
    repeated ContractErrInfo ContractErrInfos = 1;
}

message ErrInfoTxTimedOut {
    string txType = 1;
    string txID = 2;
    string txTimeout = 3;
}

message ErrInfoChainNotReachable {
    string chainURL = 1;
}

// Payment_API provides APIs for a user to open payment channels, send/receive payments
// and finalize the channels on the blockchain 
service Payment_API{
    rpc GetConfig (GetConfigReq) returns (GetConfigResp){}
    rpc OpenSession (OpenSessionReq) returns (OpenSessionResp) {}
    rpc Time (TimeReq) returns (TimeResp) {}
    rpc RegisterCurrency(RegisterCurrencyReq) returns (RegisterCurrencyResp) {}
    rpc Help (HelpReq) returns (HelpResp) {}

    rpc AddPeerID (AddPeerIDReq) returns (AddPeerIDResp) {}
    rpc GetPeerID (GetPeerIDReq) returns (GetPeerIDResp) {}
    rpc OpenPayCh (OpenPayChReq) returns (OpenPayChResp) {}
    rpc GetPayChsInfo (GetPayChsInfoReq) returns (GetPayChsInfoResp) {}
    rpc SubPayChProposals (SubPayChProposalsReq) returns (stream SubPayChProposalsResp) {}
    rpc UnsubPayChProposals (UnsubPayChProposalsReq) returns (UnsubPayChProposalsResp) {}
    rpc RespondPayChProposal (RespondPayChProposalReq) returns (RespondPayChProposalResp) {}
    rpc CloseSession (CloseSessionReq) returns (CloseSessionResp) {}
    rpc DeployAssetERC20(DeployAssetERC20Req) returns (DeployAssetERC20Resp) {}

    rpc SendPayChUpdate (SendPayChUpdateReq) returns (SendPayChUpdateResp) {}
    rpc SubPayChUpdates (SubpayChUpdatesReq) returns (stream SubPayChUpdatesResp) {}
    rpc UnsubPayChUpdates (UnsubPayChUpdatesReq) returns (UnsubPayChUpdatesResp) {}
    rpc RespondPayChUpdate (RespondPayChUpdateReq) returns (RespondPayChUpdateResp) {}
    rpc GetPayChInfo (GetPayChInfoReq) returns (GetPayChInfoResp) {}
    rpc ClosePayCh (ClosePayChReq) returns (ClosePayChResp) {}


    rpc Fund(FundReq) returns (FundResp){}
    rpc RegisterAssetERC20(RegisterAssetERC20Req) returns (RegisterAssetERC20Resp){}
    rpc IsAssetRegistered(IsAssetRegisteredReq) returns (IsAssetRegisteredResp){}

    rpc StartWatchingLedgerChannel(stream StartWatchingLedgerChannelReq) returns (stream StartWatchingLedgerChannelResp) {}
    rpc StopWatching(StopWatchingReq) returns (StopWatchingResp) {}

    rpc Register(RegisterReq) returns (RegisterResp){}
    rpc Withdraw(WithdrawReq) returns (WithdrawResp){}
    rpc Progress(ProgressReq) returns (ProgressResp){}
    rpc Subscribe(SubscribeReq) returns (stream SubscribeResp){}
    rpc Unsubscribe(UnsubscribeReq) returns (UnsubscribeResp){}

}

message GetConfigReq {
}

message GetConfigResp{
    string chainAddress = 1;
    string adjudicator = 2;
    string assetETH = 3;
    repeated string commTypes = 4;
    repeated string idProviderTypes = 5;
}

message OpenSessionReq {
    string configFile = 1;
}

message OpenSessionResp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        string sessionID = 1;
        repeated PayChInfo restoredChs = 2;
    }
}

message TimeReq {
}

message TimeResp {
    int64 time = 1;
}

message RegisterCurrencyReq {
    string tokenAddr = 1;
    string assetAddr = 2;
}

message RegisterCurrencyResp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        string symbol = 1;
    }
}

message HelpReq {
}

message HelpResp {
    repeated string apis = 1;
}

message AddPeerIDReq {
    string sessionID=1;
    PeerID peerID=2;
}

message AddPeerIDResp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        bool success=1;
    }
}

message GetPeerIDReq {
    string sessionID=1;
    string alias = 2;
}

message  GetPeerIDResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PeerID peerID = 1;
    }
}

message OpenPayChReq {
    string sessionID = 1;
    BalInfo openingBalInfo = 2;
    uint64 challengeDurSecs = 3;
}

message OpenPayChResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo openedPayChInfo = 1;
    }
}

message GetPayChsInfoReq {
    string sessionID = 1;
}

message GetPayChsInfoResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        repeated PayChInfo openPayChsInfo = 1;
    }
}

message SubPayChProposalsReq {
    string sessionID = 1;
}

message SubPayChProposalsResp {
    oneof response{
        Notify notify = 1;
        MsgError error = 2;
    }
    message Notify {
        string proposalID = 2;
        BalInfo openingBalInfo = 4;
        uint64 challengeDurSecs = 5;
        int64 expiry = 6;
    }
}

message UnsubPayChProposalsReq {
    string sessionID=1;
}

message UnsubPayChProposalsResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        bool success=1;
    }
}

message RespondPayChProposalReq{
    string sessionID=1;
    string proposalID=2;
    bool accept =3;
}

message RespondPayChProposalResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo openedPayChInfo=2;
    }
}

message CloseSessionReq {
    string sessionID = 1;
    bool force = 2;
}

message CloseSessionResp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        repeated PayChInfo openPayChsInfo = 1;
    }
}

message DeployAssetERC20Req {
    string sessionID = 1;
    string tokenAddr = 2;
}

message DeployAssetERC20Resp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        string AssetAddr = 2;
    }
}

message SendPayChUpdateReq {
    string sessionID = 1;
    string chID = 2;
    repeated Payment payments = 3;
}

message SendPayChUpdateResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo updatedPayChInfo = 1;
    }
}

message SubpayChUpdatesReq {
    string sessionID = 1;
    string chID = 2;
}

message SubPayChUpdatesResp {
    oneof response{
        Notify notify = 1;
        MsgError error = 2;
    }
    message Notify {
        enum ChUpdateType {
            open = 0;
            final = 1;
            closed = 2;
        }
        string updateID = 1;
        PayChInfo proposedPayChInfo = 2;
        ChUpdateType Type = 3;
        int64 expiry = 4;
        MsgError error = 5;
    }
}

message UnsubPayChUpdatesReq {
    string sessionID = 1;
    string chID = 2;
}

message UnsubPayChUpdatesResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        bool success=1;
    }
}

message RespondPayChUpdateReq{
    string sessionID=1;
    string chID=2;
    string updateID=3;
    bool accept=4;
}

message RespondPayChUpdateResp {
    oneof response{
        MsgSuccess msgSuccess=1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo updatedPayChInfo = 1;
    }
}

message GetPayChInfoReq {
    string sessionID=1;
    string chID=2;
}

message GetPayChInfoResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo payChInfo = 1;
    }
}

message ClosePayChReq {
    string sessionID = 1;
    string chID = 2;
}

message ClosePayChResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo closedPayChInfo = 1;
    }
}


message FundReq {
    string sessionID=1;
    Params params = 2;
    State state = 3;
    uint32 idx = 4;
    Balances agreement = 5;
}

message FundResp {
    MsgError error = 1;
}

message RegisterAssetERC20Req {
    string sessionID=1;
    bytes asset = 2;
    string tokenAddr = 3;
    string deposiorAcc = 4;
}

message RegisterAssetERC20Resp {
    bool msgSuccess = 1;
}

message IsAssetRegisteredReq {
    string sessionID=1;
    bytes asset = 2;
}

message IsAssetRegisteredResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        bool isRegistered = 1;
    }
}

message StartWatchingLedgerChannelReq {
    string sessionID = 1;
    Params params = 2;
    State state = 3;
    repeated bytes sigs = 4;
}

message StartWatchingLedgerChannelResp {
    oneof response{
        RegisteredEvent registeredEvent = 1;
        ProgressedEvent progressedEvent = 2;
        ConcludedEvent concludedEvent = 3;
        MsgError error = 4;
    }
}

message AdjudicatorEventBase {
    bytes chID = 1;
    Timeout timeout = 2;
    uint64 version = 3;

    enum TimeoutType {
        elapsed = 0;
        time = 1;
        ethBlock = 2;
    }
    message Timeout {
    	int64 sec = 1;
        TimeoutType type = 3;
    }
}

message RegisteredEvent {
    AdjudicatorEventBase adjudicatorEventBase = 1;
    State state = 2;
    repeated bytes sigs = 3;
}

message ProgressedEvent {
    AdjudicatorEventBase adjudicatorEventBase = 1;
    State state = 2;
    uint32 idx = 3;
}

message ConcludedEvent {
    AdjudicatorEventBase adjudicatorEventBase = 1;
}

message StopWatchingReq {
    string sessionID = 1;
    bytes chID = 2;
}

message StopWatchingResp {
    MsgError error = 1;
}

message AdjudicatorReq {
    Params params = 1;
    bytes acc = 2;
    Transaction tx = 3; 
    uint32 idx = 4;
    bool secondary = 5;
}

message Transaction {
    State state = 1;
    repeated bytes sigs = 2;
}

message SignedState {
    Params params = 1;
    State state = 2;
    repeated bytes sigs = 3;
}

message RegisterReq {
    string sessionID = 1;
    AdjudicatorReq adjReq = 2;
    repeated SignedState signedStates = 3;
}

message RegisterResp {
    MsgError error = 1;
}

message StateMap {
    bytes id = 1;
    State state = 2;
}

message WithdrawReq {
    string sessionID = 1;
    AdjudicatorReq adjReq = 2;
    repeated StateMap stateMap = 3;
}

message WithdrawResp {
    MsgError error = 1;
}

message ProgressReq {
    string sessionID = 1;
    AdjudicatorReq adjReq = 2;
    State newState = 3;
    bytes sig = 4;
}

message ProgressResp {
    MsgError error = 1;
}

message SubscribeReq {
    string sessionID = 1;
    bytes chID = 2;
}

message SubscribeResp {
    oneof response{
        RegisteredEvent registeredEvent = 1;
        ProgressedEvent progressedEvent = 2;
        ConcludedEvent concludedEvent = 3;
        MsgError error = 4;
    }
}

message UnsubscribeReq {
    string sessionID = 1;
    bytes chID = 2;
}

message UnsubscribeResp {
    MsgError error = 1;
}
