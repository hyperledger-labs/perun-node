// Copyright (c) 2023 - for information on the respective copyright owner
// see the NOTICE file and/or the repository at
// https://github.com/hyperledger-labs/perun-node
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: watching_service.proto

// Package pb contains proto3 definitions for user API and the corresponding
// generated code for grpc server and client.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Watching_API_StartWatchingLedgerChannel_FullMethodName = "/pb.Watching_API/StartWatchingLedgerChannel"
	Watching_API_StopWatching_FullMethodName               = "/pb.Watching_API/StopWatching"
)

// Watching_APIClient is the client API for Watching_API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Watching_APIClient interface {
	StartWatchingLedgerChannel(ctx context.Context, opts ...grpc.CallOption) (Watching_API_StartWatchingLedgerChannelClient, error)
	StopWatching(ctx context.Context, in *StopWatchingReq, opts ...grpc.CallOption) (*StopWatchingResp, error)
}

type watching_APIClient struct {
	cc grpc.ClientConnInterface
}

func NewWatching_APIClient(cc grpc.ClientConnInterface) Watching_APIClient {
	return &watching_APIClient{cc}
}

func (c *watching_APIClient) StartWatchingLedgerChannel(ctx context.Context, opts ...grpc.CallOption) (Watching_API_StartWatchingLedgerChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &Watching_API_ServiceDesc.Streams[0], Watching_API_StartWatchingLedgerChannel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &watching_APIStartWatchingLedgerChannelClient{stream}
	return x, nil
}

type Watching_API_StartWatchingLedgerChannelClient interface {
	Send(*StartWatchingLedgerChannelReq) error
	Recv() (*StartWatchingLedgerChannelResp, error)
	grpc.ClientStream
}

type watching_APIStartWatchingLedgerChannelClient struct {
	grpc.ClientStream
}

func (x *watching_APIStartWatchingLedgerChannelClient) Send(m *StartWatchingLedgerChannelReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *watching_APIStartWatchingLedgerChannelClient) Recv() (*StartWatchingLedgerChannelResp, error) {
	m := new(StartWatchingLedgerChannelResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *watching_APIClient) StopWatching(ctx context.Context, in *StopWatchingReq, opts ...grpc.CallOption) (*StopWatchingResp, error) {
	out := new(StopWatchingResp)
	err := c.cc.Invoke(ctx, Watching_API_StopWatching_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Watching_APIServer is the server API for Watching_API service.
// All implementations must embed UnimplementedWatching_APIServer
// for forward compatibility
type Watching_APIServer interface {
	StartWatchingLedgerChannel(Watching_API_StartWatchingLedgerChannelServer) error
	StopWatching(context.Context, *StopWatchingReq) (*StopWatchingResp, error)
	mustEmbedUnimplementedWatching_APIServer()
}

// UnimplementedWatching_APIServer must be embedded to have forward compatible implementations.
type UnimplementedWatching_APIServer struct {
}

func (UnimplementedWatching_APIServer) StartWatchingLedgerChannel(Watching_API_StartWatchingLedgerChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method StartWatchingLedgerChannel not implemented")
}
func (UnimplementedWatching_APIServer) StopWatching(context.Context, *StopWatchingReq) (*StopWatchingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWatching not implemented")
}
func (UnimplementedWatching_APIServer) mustEmbedUnimplementedWatching_APIServer() {}

// UnsafeWatching_APIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Watching_APIServer will
// result in compilation errors.
type UnsafeWatching_APIServer interface {
	mustEmbedUnimplementedWatching_APIServer()
}

func RegisterWatching_APIServer(s grpc.ServiceRegistrar, srv Watching_APIServer) {
	s.RegisterService(&Watching_API_ServiceDesc, srv)
}

func _Watching_API_StartWatchingLedgerChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Watching_APIServer).StartWatchingLedgerChannel(&watching_APIStartWatchingLedgerChannelServer{stream})
}

type Watching_API_StartWatchingLedgerChannelServer interface {
	Send(*StartWatchingLedgerChannelResp) error
	Recv() (*StartWatchingLedgerChannelReq, error)
	grpc.ServerStream
}

type watching_APIStartWatchingLedgerChannelServer struct {
	grpc.ServerStream
}

func (x *watching_APIStartWatchingLedgerChannelServer) Send(m *StartWatchingLedgerChannelResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *watching_APIStartWatchingLedgerChannelServer) Recv() (*StartWatchingLedgerChannelReq, error) {
	m := new(StartWatchingLedgerChannelReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Watching_API_StopWatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWatchingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Watching_APIServer).StopWatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Watching_API_StopWatching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Watching_APIServer).StopWatching(ctx, req.(*StopWatchingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Watching_API_ServiceDesc is the grpc.ServiceDesc for Watching_API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Watching_API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Watching_API",
	HandlerType: (*Watching_APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopWatching",
			Handler:    _Watching_API_StopWatching_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartWatchingLedgerChannel",
			Handler:       _Watching_API_StartWatchingLedgerChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "watching_service.proto",
}
