// Copyright (c) 2023 - for information on the respective copyright owner
// see the NOTICE file and/or the repository at
// https://github.com/hyperledger-labs/perun-node
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: funding_service.proto

// Package pb contains proto3 definitions for user API and the corresponding
// generated code for grpc server and client.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Funding_API_RegisterAssetERC20_FullMethodName = "/pb.Funding_API/RegisterAssetERC20"
	Funding_API_IsAssetRegistered_FullMethodName  = "/pb.Funding_API/IsAssetRegistered"
	Funding_API_Fund_FullMethodName               = "/pb.Funding_API/Fund"
)

// Funding_APIClient is the client API for Funding_API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Funding_APIClient interface {
	RegisterAssetERC20(ctx context.Context, in *RegisterAssetERC20Req, opts ...grpc.CallOption) (*RegisterAssetERC20Resp, error)
	IsAssetRegistered(ctx context.Context, in *IsAssetRegisteredReq, opts ...grpc.CallOption) (*IsAssetRegisteredResp, error)
	Fund(ctx context.Context, in *FundReq, opts ...grpc.CallOption) (*FundResp, error)
}

type funding_APIClient struct {
	cc grpc.ClientConnInterface
}

func NewFunding_APIClient(cc grpc.ClientConnInterface) Funding_APIClient {
	return &funding_APIClient{cc}
}

func (c *funding_APIClient) RegisterAssetERC20(ctx context.Context, in *RegisterAssetERC20Req, opts ...grpc.CallOption) (*RegisterAssetERC20Resp, error) {
	out := new(RegisterAssetERC20Resp)
	err := c.cc.Invoke(ctx, Funding_API_RegisterAssetERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funding_APIClient) IsAssetRegistered(ctx context.Context, in *IsAssetRegisteredReq, opts ...grpc.CallOption) (*IsAssetRegisteredResp, error) {
	out := new(IsAssetRegisteredResp)
	err := c.cc.Invoke(ctx, Funding_API_IsAssetRegistered_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funding_APIClient) Fund(ctx context.Context, in *FundReq, opts ...grpc.CallOption) (*FundResp, error) {
	out := new(FundResp)
	err := c.cc.Invoke(ctx, Funding_API_Fund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Funding_APIServer is the server API for Funding_API service.
// All implementations must embed UnimplementedFunding_APIServer
// for forward compatibility
type Funding_APIServer interface {
	RegisterAssetERC20(context.Context, *RegisterAssetERC20Req) (*RegisterAssetERC20Resp, error)
	IsAssetRegistered(context.Context, *IsAssetRegisteredReq) (*IsAssetRegisteredResp, error)
	Fund(context.Context, *FundReq) (*FundResp, error)
	mustEmbedUnimplementedFunding_APIServer()
}

// UnimplementedFunding_APIServer must be embedded to have forward compatible implementations.
type UnimplementedFunding_APIServer struct {
}

func (UnimplementedFunding_APIServer) RegisterAssetERC20(context.Context, *RegisterAssetERC20Req) (*RegisterAssetERC20Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAssetERC20 not implemented")
}
func (UnimplementedFunding_APIServer) IsAssetRegistered(context.Context, *IsAssetRegisteredReq) (*IsAssetRegisteredResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAssetRegistered not implemented")
}
func (UnimplementedFunding_APIServer) Fund(context.Context, *FundReq) (*FundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fund not implemented")
}
func (UnimplementedFunding_APIServer) mustEmbedUnimplementedFunding_APIServer() {}

// UnsafeFunding_APIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Funding_APIServer will
// result in compilation errors.
type UnsafeFunding_APIServer interface {
	mustEmbedUnimplementedFunding_APIServer()
}

func RegisterFunding_APIServer(s grpc.ServiceRegistrar, srv Funding_APIServer) {
	s.RegisterService(&Funding_API_ServiceDesc, srv)
}

func _Funding_API_RegisterAssetERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAssetERC20Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Funding_APIServer).RegisterAssetERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Funding_API_RegisterAssetERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Funding_APIServer).RegisterAssetERC20(ctx, req.(*RegisterAssetERC20Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funding_API_IsAssetRegistered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAssetRegisteredReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Funding_APIServer).IsAssetRegistered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Funding_API_IsAssetRegistered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Funding_APIServer).IsAssetRegistered(ctx, req.(*IsAssetRegisteredReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funding_API_Fund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Funding_APIServer).Fund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Funding_API_Fund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Funding_APIServer).Fund(ctx, req.(*FundReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Funding_API_ServiceDesc is the grpc.ServiceDesc for Funding_API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Funding_API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Funding_API",
	HandlerType: (*Funding_APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAssetERC20",
			Handler:    _Funding_API_RegisterAssetERC20_Handler,
		},
		{
			MethodName: "IsAssetRegistered",
			Handler:    _Funding_API_IsAssetRegistered_Handler,
		},
		{
			MethodName: "Fund",
			Handler:    _Funding_API_Fund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "funding_service.proto",
}
